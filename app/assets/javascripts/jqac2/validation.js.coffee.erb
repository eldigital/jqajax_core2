window.JqAjaxCore2.Validation =

<% JqajaxCore2::Validations.settings.each do |name, settings|  %>
<% if settings[:regexp] %>
  validate<%= name.to_s.camelize %>: (el) ->
    attr = $(el).val()
    console.log(attr)
    result = {}
    result.status = JqAjaxCore2.Validation.validateFormat(attr, <%= settings[:regexp] %>, <%= settings[:empty] == false ? 'false' : 'true' %>)
    result.message = JqAjaxCore2.ValidationErrorMessages.<%= name.to_s.camelize %>
    return result
  <% end %>  
  # Provide getter for data attributes defined in th 
  <% if settings[:data] %>
  get<%= name.to_s.camelize %>Data: (el) ->
    data = {}
    <% settings[:data].each do |m, d| %>
    data.<%= m.to_s.camelize %> = $(el).attr("<%= "data-#{JqajaxCore2::Validations.data_prefix}-#{m.to_s.dasherize}" %>") || "<%= d %>"
    <% end %>
    return data
  <% end %>    
<% end %>
  
  
  # Define Custom methods for complex validation
  validatePasswordSimple: (el) ->
    value = $(el).val()
    
    settings = JqAjaxCore2.Validation.getPasswordSimpleData(el)
    result = {}
    result.status  = false
    result.message = JqAjaxCore2.Validation.renderErrorMessage(JqAjaxCore2.ValidationErrorMessages.PasswordSimple, settings)
    
    if JqAjaxCore2.Validation.validateRequired(el) && value.length >= parseInt(settings.Length)
      result.status = true
      result.status = false if value.match(/[A-Z]/) == null
      result.status = false if value.match(/[a-z]/) == null
      result.status = false if value.match(/[0-9]/) == null
    return result
  
  validateConfirmation: (el) ->
    value = $(el).val()
    
    settings = JqAjaxCore2.Validation.getConfirmationData(el)
    result = {}
    result.status  = false
    result.message = JqAjaxCore2.Validation.renderErrorMessage(JqAjaxCore2.ValidationErrorMessages.Confirmation, settings)
    
    ref_value = $("#"+settings.ConfirmField).val()
    
    if JqAjaxCore2.Validation.validateRequired(el) && value == ref_value 
      result.status = true
    return result    
    
  renderErrorMessage: (text, vars) ->
    t = text
    for attr, value of vars
      t = t.replace('['+attr+']', value)
    return t   
  
  # Helper method for string validation with given regular expression
  validateFormat: (string, regexp, empty) ->
    if (!string || 0 == string.length) && empty == true
      return true
    else if string.match(regexp) == null
      return false
    else
      return true
  
  # run the complete validation for the given form
  validateForm: (form) ->
    form = $(form)
    console.log(form)
    formStatus = true
    submitButton = $(form.find("input[type=submit]")) 
      
    $(".error-description").remove()
  
    $(form.find("input")).bind 'change keydown click', ->
      submitButton.removeAttr("disabled")
      submitButton.removeClass("disabled")
  
    <% JqajaxCore2::Validations.settings.keys.each do |mode| %>
    inputsForValidation = form.find(":input.<%= JqajaxCore2::Validations.settings[mode][:class] %>")
    inputsForValidation.each ->
      validationResult = JqAjaxCore2.Validation.validate<%= mode.to_s.camelize %>($(this))
      if validationResult.status == false && !$(this).hasClass("<%= JqajaxCore2::Validations.skip_validation_class %>") && $(this).parents(".<%= JqajaxCore2::Validations.skip_validation_class %>").length == 0
        formStatus = false;
        $(this).addClass("error");
        $(this).before("<div class='error-description'>"+ validationResult.message + "</div>");
      else
        $(this).removeClass("error");
    <% end %>
    
    form.find("div:not(.<%= JqajaxCore2::Validations.skip_validation_class %>) > input.<%= JqajaxCore2::Validations.checkbox_validation_class %>").each ->
    # Find the label for the checkbox
      checkbox_id = $(this).attr("id")      
      label = $("label[for="+checkbox_id+"]")  
     
      if !$(this).is(":checked")
        formStatus = false
        label.addClass("error")
      else
        label.removeClass("error")
  
    if formStatus == false
      submitButton.attr("disabled", true)
      submitButton.addClass("disabled")
      alert("Bei der Eingabe sind Fehler aufgetreten. Bitte prÃ¼fen Sie die markierten Felder.")
      
    return formStatus
    
  
  # Bind validation to all forms that can be found
  initForms: ->
    $("input[class*=<%= JqajaxCore2::Validations.prefix %>]:first, :input[class^=<%= JqajaxCore2::Validations.prefix %>]:first").each ->
      $(this).closest("form").addClass("<%= JqajaxCore2::Validations.form_validation_class %>")
    
    $("form.<%= JqajaxCore2::Validations.form_validation_class %>").submit ->
    
      return JqAjaxCore2.Validation.validateForm(this)

JqAjaxCore2.ValidationErrorMessages = 
  <% JqajaxCore2::Validations.settings.each do |name, settings|  %>
    <%= name.to_s.camelize %>: '<%= settings[:message] %>'
  <% end %>  